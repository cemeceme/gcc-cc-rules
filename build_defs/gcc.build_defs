
def _parseLabelValues(prefixes:list, labels:list) -> dict:
    """
    Parses the given list of label strings and creates a dict of all label values that match the given list of prefixes.
    The output dict always contains all prefixes, but will only have an empty list value if there where no labels with that label prefix.
    """
    # Generate output dict.
    res = {}
    for prefix in prefixes:
        res[prefix] = []

    # Populate with values.
    for label in labels:
        for prefix in prefixes:
            if(label.startswith(prefix)):
                res[prefix] += [label[len(prefix):]]
    return(res)


def _buildTUCommand(labels:list, prefixPath:str, defaultFlags:list, c:bool) -> str:
    """
    Generates the command string for a translation unit.
    """

    # Get default flags.
    std = ""
    if(c):
        std = "c99" # C standard to use.
    else:
        std = "c++20" # C++ standard to use.

    # Parse labels.
    labels = _parseLabelValues(["cc:inc:", "cc:def:", "cc:cf:", "cc:pc:", "cc:pcc:"], labels)
    defines = labels["cc:def:"]
    includes = labels["cc:inc:"]
    warnings = []
    pkgConfigLibs = labels["cc:pc:"]
    pkgConfigFlags = labels["cc:pcc:"]
    defaultFlags += labels["cc:cf:"]

        
    # Parse default flags.
    flags = []
    for flag in defaultFlags:
        strippedFlag = flag.lstrip("-")
        if(strippedFlag.startswith("std=")):
            std = strippedFlag[4:]
            continue

        if(strippedFlag.startswith("I")):
            includes += [strippedFlag[1:]]
            continue

        if(strippedFlag.startswith("D")):
            defines += [strippedFlag[1:]]
            continue
        
        if(strippedFlag.startswith("W")):
            warnings += [strippedFlag[1:]]
            continue

        flags += [flag]

    # Set up command.
    cmd = ["\"$TOOLS_CC\"", "-c", "-o", "\"$OUT\""] # Gcc in compile only mode. TODO is "-s" needed?

    # Include paths.
    cmd += ["-I."]
    for include in includes:
        cmd += ["-isystem" + include] # TODO figure out how to dynamically select if isystem or I should be used (I.e. if this is an include from a subrepo, use isystem)
        # cmd += ["-I" + include]

    # Defines.
    for define in defines:
        cmd += ["-D" + define]

    # Source files.
    cmd += ["${SRCS_SRCS}"]

    # Standard. 
    cmd += ["--std=" + std]

    # Error/warning flags.
    for warning in warnings:
        cmd += ["-W" + warning]

    # Other flags.
    cmd += flags
    cmd += ["-fPIC"] # Position independent code.

    # Add pkg-config command if specified.
    if(len(pkgConfigFlags) > 0 or len(pkgConfigLibs) > 0):
        cmd += ["`", "pkg-config", "--cflags"] + pkgConfigFlags + pkgConfigLibs + ["`"]
    
    # Re-write file prefix to be relative to the project root.
    cmd += ["-ffile-prefix-map=$(pwd)=" + prefixPath]
    return(" ".join(cmd))

def _getBuildLinkCommand(sharedLib:bool):
    def _buildLinkCommand(name:str):
        """
        Generates the command for a link step as a pre-build call.
        """

        # Parse labels.
        labels = _parseLabelValues(["cc:inc:", "cc:lib:", "cc:ld:", "cc:al:", "cc:pc:"], get_labels(name, ""))
        includes = labels["cc:inc:"]
        libraries = labels["cc:lib:"]
        flags = [flag.replace(" ", ",") for flag in labels["cc:ld:"]]
        alwaysLink = labels["cc:al:"]
        pkgConfigLibs = labels["cc:pc:"]

        # Objects/archives to link.
        # It may also be interesting to actually recognize the objects to link, which would allow for deduplication with alwaysLink options.
        linkObjects = ["`find . -name \"*.o\" -or -name \"*.a\" | sort`"]
        alwaysLinkObjects = alwaysLink

        cmd = ["$TOOLS_LD", "-o", "\"$OUT\""]
        if(sharedLib):
            # Always link all inputs for shared libraries.
            alwaysLinkObjects = linkObjects
            linkObjects = []
            cmd += ["--shared"]
        
        objectsCmd = []
        # Add always link objects if any.
        if(len(alwaysLinkObjects) > 0):
            objectsCmd += ["-Wl,--whole-archive"] + alwaysLinkObjects + ["-Wl,--no-whole-archive"]
        
        # Add normal link objects, if any.
        if(len(linkObjects) > 0):
            objectsCmd += linkObjects

        if(len(objectsCmd) > 0):
            # Wrap all link objects within a group and add to cmd.
            cmd += ["-Wl,--start-group"] + objectsCmd + ["-Wl,--end-group"]

        # Add library paths.
        includeCmd = []
        for library in libraries:
            directory, fileName = split_path(library)
            includeCmd += ["-L" + directory, "-l" + fileName]

        if(len(includeCmd) > 0):
            cmd += [",".join(["-Wl"] + includeCmd)] # Include paths.

        cmd += ["-Wl,--build-id=none"] # Disable build ID.

        # Linker flags.
        if(len(flags) > 0):
            cmd += [",".join(["-Wl"] + flags)]

        cmd += CONFIG.GCC.DEFAULT_LDFLAGS.split(" ")

        # Add pkg-config command if specified.
        if(len(pkgConfigLibs) > 0):
            cmd += ["`", "pkg-config", "--libs"] + pkgConfigLibs + ["`"]

        set_command(name, "opt", " ".join(cmd))
        set_command(name, "dbg", " ".join(cmd))

    return(_buildLinkCommand)

def getTranslationUnit(c:bool):

    def _TUCommand(name:str):
        """
        Generates the command for a translation unit as a pre-build call.
        """

        labels = get_labels(name, "")
        prefixPath = join_path(subrepo_name(), get_base_path())
        
        # Generate and set debug and optimized commands.
        set_command(name, "opt", _buildTUCommand(labels, prefixPath, CONFIG.GCC.DEFAULT_OPT_CFLAGS.split(" "), c))
        set_command(name, "dbg", _buildTUCommand(labels, prefixPath, CONFIG.GCC.DEFAULT_DBG_CFLAGS.split(" "), c))

    # Tool definitions.
    tools = {}

    # Select correct tool depending on if this is for C or C++
    if(c):
        tools["cc"] = CONFIG.GCC.CC_TOOL
    else:
        tools["cc"] = CONFIG.GCC.CPP_TOOL

    def translationUnit(name:str, src:str, out:str=None, hdrs:list=[], deps:list=[], labels:list=[]):

        srcRule = build_rule(
            name=name,
            outs=[out],
            optional_outs=['*.gcno'],
            deps=deps,
            srcs={'srcs': [src], 'hdrs': hdrs},
            cmd="",
            pre_build=_TUCommand,
            building_description='Compiling... ',
            binary=False,
            needs_transitive_deps=True,
            requires=["cc_hdrs", "test"],
            labels=labels,
            tools=tools
        )
        return(srcRule)
    return(translationUnit)

def archive(name: str, out:str, srcs:list, deps:list):

    # Tool definitions.
    tools = {
        "ar": [CONFIG.GCC.AR_TOOL],
    }

    archiveRule = build_rule(
        name=name,
        outs=[out],
        srcs=srcs,
        cmd="\"$TOOLS_AR\" rcs \"$OUT\" `find . -name \"*.o\" | sort`",
        building_description='Archiving...',
        binary=True,
        deps=deps,
        tools = tools,
        output_is_complete=False
    )

    return(archiveRule)

def link(name:str, out:str, deps:list=[], sharedLib:bool, labels:list=[]):
    pass

    # Tool definitions.
    tools = {
        "ld": [CONFIG.GCC.LD_TOOL]
    }

    requires = ["cc", "test"]

    linkRule = build_rule(
        name=name,
        outs=[out],
        optional_outs=['*.gcno'],
        deps=deps,
        cmd="",
        pre_build=_getBuildLinkCommand(sharedLib=sharedLib),
        building_description='Linking... ',
        binary=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        requires=requires,
        labels=labels,
        tools=tools,
    )
    return(linkRule)